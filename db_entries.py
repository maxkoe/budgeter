import sqlite3 as sql

###############################################################################
# Generate comments for excel and the db                                      #
###############################################################################

def autogenerate_database_comment_multiple_excel_ranges(filename, ranges, 
							comment_sheet) :
    try : 
        ranges_string = ', '.join(ranges[:-1]) + \
			(' and ' if len(ranges) > 1 else '') + ranges[-1]
    except IndexError :
        raise ValueError('You should provide at least one Excel range')
    return 'This entry was automatically generated from the excel file ' + \
           '{}. It is based on the cells {}. A note has been '.format(
               filename, ranges_string) + \
           'added to the respective cells in the sheet {}.'.format(comment_sheet)
        
def autogenerate_database_comment(filename, range_, comment_sheet) :
    return autogenerate_database_comment_multiple_excel_ranges(
		filename, [range_], comment_sheet)

def autogenerate_excel_comment(date, db_filename, the_id) :
    return 'On {} this cell was automatically read and '.format(date) + \
           'inserted into the database {}. The id ofthe entry is {}.'.format(
               date, db_filename, the_id)

###############################################################################
# Generate an id for a db entry                                               #
###############################################################################

def generate_id(date) :
    '''Generate a new unique ID in the budgeter on the database. An ID is an 
    integer with 8 digits, where the first digit are based on the date and the 
    last two digits are a serial number.
    
    Keyword arguments:
        date - the date on which the ID should be based
        
    Example: 
        If date==DateTime('2017-08-17') and the database contains the IDs 
        2017081701, 2017081702, 2017081703 and 2017081705, then the id 
	2017081704 is returned.
    
    Exceptions:
        IndexError - if all 99 possible serial numbers (01-99) have already 
		     been distributed.
        
        N.B. Could also Except, if the Database Call raises an exception.
    '''
    date_int = int(date.strftime('%Y%m%d00'))
    crsr = db.cursor()
    crsr.execute('SELECT id FROM money_events WHERE id BETWEEN ' +
		 '{} AND {}'.format(date_int, date_int + 99))
    results = [row[0] for row in crsr.fetchall()]

    current_id = date_int + 1
    while current_id in results :
        current_id += 1
    if current_id > date_int + 99 :
        raise IndexError(
	    'Encountered to many ids for the date {}'.format(date))

    return current_id
###############################################################################
# Create related db entries from data                                         #
###############################################################################

def put_budget_event_into_database_autogenerated(
        date, description, amount, budget_pot, comment, given_id = None, 
        event_type = None) :

    crsr = db.cursor()

    if given_id is None :
        if event_type is None :
            raise ValueError('If no id is provided it is assumed, that a ' +
                             'money event has to be created. In this case ' +
                             'an event_type must be supplied.')

        given_id = generate_id(date)

        crsr.execute('INSERT INTO money_events VALUES ({}, "{}", "{}", ' + 
                     'date("{}"));'.format(given_id, event_type, description, 
                                           date))

    crsr.execute(
	'INSERT INTO budget_events VALUES ({}, "{}", {}, NULL, NULL);'.format(
	    given_id, budget_pot, amount))
    crsr.execute(
	'INSERT INTO database_events VALUES ({}, "{}", "{}", "{}");'.format(
	    the_id, 'Erstellung', dt.now().strftime('%Y-%m-%d'), comment))
    db.commit()
    
    return the_id

def put_payment_into_database_autogenerated(date, event_type, description, 
					    amount, money_pot, budget_pot, 
					    comment) :
    the_id = generate_id(date)
    
    crsr = db.cursor()
    crsr.execute(
	'INSERT INTO money_events VALUES ({}, "{}", "{}", date("{}"));'.format(
	    the_id, event_type, description, date))
    crsr.execute(
	'INSERT INTO payments VALUES ({}, "{}", {}, NULL, NULL);'.format(
	    the_id,  money_pot, amount))
    crsr.execute(
	'INSERT INTO budget_events VALUES ({}, "{}", {}, NULL, NULL);'.format(
	    the_id, budget_pot, amount))
    crsr.execute(
	'INSERT INTO database_events VALUES ({}, "{}", "{}", "{}");'.format(
	    the_id, 'Erstellung', dt.now().strftime('%Y-%m-%d'), comment))
    db.commit()
    
    return the_id

def put_transfer_into_database_autogenerated(
	date, event_type, description, amount, money_pot_source, 
	money_pot_sink, effect_date = None, comment = '') :

    the_id = generate_id(date)
    
    crsr = db.cursor()
    crsr.execute(
	'INSERT INTO money_events VALUES ({}, "{}", "{}", date("{}"));'.format(
	    the_id, event_type, description, date))
    crsr.execute(
	'INSERT INTO transfers VALUES ({}, "{}", "{}", {}, NULL, {});'.format(
	    the_id,  money_pot_source, money_pot_sink, amount, 
	    'NULL' if effect_date is None else '"{}"'.format(effect_date)))
    crsr.execute(
	'INSERT INTO database_events VALUES ({}, "{}", "{}", "{}");'.format(
	    the_id, 'Erstellung', dt.now().strftime('%Y-%m-%d'), comment))
    db.commit()
    
    return the_id
